(function() {'use strict'; const CONFIG = {portalId:'491011',hubdbTableId:'YOUR_HUBDB_TABLE_ID',apiEndpoint:'/hubdb/api/v2/tables',cacheKey:'lsretail_option_a_cookies',cacheDuration:86400000,selectors:{banner:'#hs-eu-cookie-confirmation',inner:'#hs-eu-cookie-confirmation-inner',settingsBtn:'#hs-eu-cookie-settings-button',policyWording:'#hs-eu-policy-wording',buttonGroup:'#hs-eu-confirmation-button-group',acceptBtn:'#hs-eu-confirmation-button',declineBtn:'#hs-eu-decline-button' },categories:[ {key:'1',id:'essential',label:'Essential Cookies',description:'These cookies are necessary for our LS Retail platform to function properly and cannot be disabled.',required:true,icon:'ðŸ”’' },{key:'2',id:'analytics',label:'Analytics Cookies',description:'Help us understand how businesses use our retail solutions to improve our products.',required:false,icon:'ðŸ“Š' },{key:'3',id:'marketing',label:'Marketing Cookies',description:'Enable targeted content about our unified commerce solutions for your business type.',required:false,icon:'ðŸŽ¯' }],brandColors:{primary:'#361d5c',accent:'#f6c370',success:'#4caf50',text:'#ffffff',background:'rgba(255,255,255,0.1)' },animations:{duration:300,easing:'ease-in-out' },debug:true }; const Utils = {log:function(...args) {if (CONFIG.debug) {console.log('[LS Retail Option A]',...args)}},error:function(...args) {console.error('[LS Retail Option A]',...args)},getCookie:function(name) {const value = `; ${document.cookie}`; const parts = value.split(`; ${name}=`); return parts.length === 2 ? parts.pop().split(';').shift() :null},parseConsentCookie:function() {const cookie = Utils.getCookie('__hs_cookie_cat_pref'); if (!cookie) return {}; const consent = {}; cookie.split('_').forEach(part => {const [key,value] = part.split(':'); if (key && value !== undefined) {consent[key] = value === 'true'}}); return consent}}; const HubSpotAPI = {initialized:false,originalSettingsHandler:null,init:function() {if (this.initialized) return; Utils.log('Initializing HubSpot API integration'); if (typeof window._hsp === 'undefined') {Utils.log('HubSpot API not found,running in mock mode'); this.initMockAPI()}else {Utils.log('Connected to LS Retail HubSpot portal 491011'); this.initRealAPI()}this.initialized = true},initRealAPI:function() {window._hsp = window._hsp || []; window._hsp.push(['addPrivacyConsentListener',function(consent) {Utils.log('LS Retail consent updated:',consent); OptionAEnhancer.updateConsentUI(consent)}]); window._hsp.push(['getPrivacyConsentState',function(consentState) {Utils.log('LS Retail initial consent:',consentState); OptionAEnhancer.updateConsentUI(consentState)}])},initMockAPI:function() {window._hsp = window._hsp || []; window._hsp.mockConsent = Utils.parseConsentCookie() || {'1':true,'2':false,'3':false }; window._hsp.push = function(args) {const [method,callback] = args; if (method === 'addPrivacyConsentListener') {window._hsp.consentListener = callback}else if (method === 'getPrivacyConsentState') {setTimeout(() => callback(window._hsp.mockConsent),10)}else if (method === 'updatePrivacyConsent') {const consent = args[1]; window._hsp.mockConsent = Object.assign({},window._hsp.mockConsent,consent); if (window._hsp.consentListener) {window._hsp.consentListener(window._hsp.mockConsent)}Utils.log('Mock consent updated:',window._hsp.mockConsent)}}},updateConsent:function(categoryKey,enabled) {const consent = Utils.parseConsentCookie(); consent[categoryKey] = enabled; if (window._hsp && window._hsp.push) {window._hsp.push(['updatePrivacyConsent',consent]); Utils.log('Updating consent for category',categoryKey,'to',enabled)}}}; const HubDBIntegration = {async loadData() {const cached = this.getCachedData(); if (cached) {Utils.log('Using cached cookie data'); return cached}if (CONFIG.portalId !== 'YOUR_PORTAL_ID' && CONFIG.hubdbTableId !== 'YOUR_HUBDB_TABLE_ID') {try {const response = await fetch( `${CONFIG.apiEndpoint}/${CONFIG.hubdbTableId}/rows?portalId=${CONFIG.portalId}`,{headers:{'Accept':'application/json' }}); if (response.ok) {const data = await response.json(); this.setCachedData(data); Utils.log('Loaded cookie data from HubDB'); return data}}catch (error) {Utils.error('Failed to load HubDB data:',error)}}return this.getLSRetailMockData()},getCachedData:function() {try {const cached = localStorage.getItem(CONFIG.cacheKey); if (cached) {const parsed = JSON.parse(cached); if (Date.now() - parsed.timestamp < CONFIG.cacheDuration) {return parsed.data}}}catch (error) {Utils.error('Cache read error:',error)}return null},setCachedData:function(data) {try {localStorage.setItem(CONFIG.cacheKey,JSON.stringify({timestamp:Date.now(),data:data }))}catch (error) {Utils.error('Cache write error:',error)}},getLSRetailMockData:function() {return {rows:[ {values:{category_key:'1',cookie_name:'_hs_session',purpose:'LS Retail session management',duration:'Session',description:'Essential for secure access to LS Central and maintaining your dashboard session' }},{values:{category_key:'1',cookie_name:'__hs_opt_out',purpose:'Privacy preferences storage',duration:'13 months',description:'Remembers your cookie consent choices for LS Retail services' }},{values:{category_key:'2',cookie_name:'_ga',purpose:'Website analytics',duration:'2 years',description:'Helps us understand how retail businesses use our website and solutions' }},{values:{category_key:'2',cookie_name:'__hstc',purpose:'Visitor behavior tracking',duration:'13 months',description:'Tracks visitor sessions to optimize the LS Central user experience' }},{values:{category_key:'3',cookie_name:'_fbp',purpose:'Marketing campaign optimization',duration:'3 months',description:'Enables targeted marketing about unified commerce solutions for your industry' }},{values:{category_key:'3',cookie_name:'__hs_cta_track',purpose:'Content personalization',duration:'6 months',description:'Personalizes content about LS Central features based on your business needs' }}] }}}; const OptionAEnhancer = {banner:null,categoryContainer:null,cookieData:null,isExpanded:false,currentConsent:{},async init() {Utils.log('Initializing LS Retail Option A Cookie Enhancer'); this.banner = await this.waitForBanner(); if (!this.banner) {Utils.error('LS Retail banner not found'); return}Utils.log('Found LS Retail banner:',this.banner.id); HubSpotAPI.init(); this.cookieData = await HubDBIntegration.loadData(); Utils.log('Cookie data loaded:',this.cookieData); this.interceptCookieSettings(); this.currentConsent = Utils.parseConsentCookie(); Utils.log('LS Retail Option A initialized successfully')},waitForBanner:function() {return new Promise((resolve) => {const existing = document.querySelector(CONFIG.selectors.banner); if (existing && existing.offsetParent !== null) {resolve(existing); return}const observer = new MutationObserver((mutations) => {const banner = document.querySelector(CONFIG.selectors.banner); if (banner && banner.offsetParent !== null) {observer.disconnect(); resolve(banner)}}); observer.observe(document.body,{childList:true,subtree:true }); setTimeout(() => {observer.disconnect(); resolve(null)},10000)})},interceptCookieSettings:function() {const settingsBtn = this.banner.querySelector(CONFIG.selectors.settingsBtn); if (!settingsBtn) {Utils.error('Cookie settings button not found'); return}Utils.log('Intercepting cookie settings button'); HubSpotAPI.originalSettingsHandler = settingsBtn.onclick; settingsBtn.onclick = null; settingsBtn.addEventListener('click',(e) => {e.preventDefault(); e.stopPropagation(); this.toggleCategoryOptions()}); settingsBtn.textContent = 'Manage Cookie Preferences'},toggleCategoryOptions:function() {if (this.isExpanded) {this.hideCategoryOptions()}else {this.showCategoryOptions()}},showCategoryOptions:function() {Utils.log('Showing category options'); if (!this.categoryContainer) {this.createCategoryContainer()}const policyWording = this.banner.querySelector(CONFIG.selectors.policyWording); if (policyWording && !this.categoryContainer.parentNode) {policyWording.insertAdjacentElement('afterend',this.categoryContainer)}this.categoryContainer.style.display = 'block'; this.categoryContainer.style.opacity = '0'; setTimeout(() => {this.categoryContainer.style.transition = `opacity ${CONFIG.animations.duration}ms ${CONFIG.animations.easing}`; this.categoryContainer.style.opacity = '1'},10); this.isExpanded = true; const settingsBtn = this.banner.querySelector(CONFIG.selectors.settingsBtn); settingsBtn.textContent = 'Hide Cookie Preferences'; settingsBtn.setAttribute('aria-expanded','true')},hideCategoryOptions:function() {Utils.log('Hiding category options'); if (this.categoryContainer) {this.categoryContainer.style.transition = `opacity ${CONFIG.animations.duration}ms ${CONFIG.animations.easing}`; this.categoryContainer.style.opacity = '0'; setTimeout(() => {this.categoryContainer.style.display = 'none'},CONFIG.animations.duration)}this.isExpanded = false; const settingsBtn = this.banner.querySelector(CONFIG.selectors.settingsBtn); settingsBtn.textContent = 'Manage Cookie Preferences'; settingsBtn.setAttribute('aria-expanded','false')},createCategoryContainer:function() {Utils.log('Creating category container'); this.categoryContainer = document.createElement('div'); this.categoryContainer.id = 'ls-option-a-categories'; this.categoryContainer.className = 'ls-option-a-categories'; this.categoryContainer.setAttribute('role','region'); this.categoryContainer.setAttribute('aria-label','Cookie category preferences'); const header = document.createElement('div'); header.className = 'ls-categories-header'; header.innerHTML = ` <h3>Choose Your Cookie Preferences</h3> <p>Click "Learn More" to see details about each cookie category.</p> `; this.categoryContainer.appendChild(header); CONFIG.categories.forEach(category => {const categoryElement = this.createCategoryElement(category); this.categoryContainer.appendChild(categoryElement)}); const actionButtons = this.createActionButtons(); this.categoryContainer.appendChild(actionButtons)},createCategoryElement:function(category) {const categoryEl = document.createElement('div'); categoryEl.className = 'ls-category'; categoryEl.setAttribute('data-category',category.key); const header = document.createElement('div'); header.className = 'ls-category-header'; header.innerHTML = ` <div class="ls-category-info"> <span class="ls-category-icon">${category.icon}</span> <span class="ls-category-label">${category.label}</span> </div> <div class="ls-category-controls"> <button class="ls-learn-more-btn" data-category="${category.key}" aria-expanded="false"> Learn More </button> <label class="ls-toggle" aria-label="Enable ${category.label}"> <input type="checkbox" class="ls-toggle-input" data-category="${category.key}" ${category.required ? 'checked disabled' :''}> <span class="ls-toggle-slider"></span> </label> </div> `; categoryEl.appendChild(header); const details = document.createElement('div'); details.className = 'ls-category-details'; details.style.display = 'none'; details.setAttribute('role','region'); details.setAttribute('aria-labelledby',`category-${category.id}-header`); const description = document.createElement('div'); description.className = 'ls-category-description'; description.innerHTML = `<p>${category.description}</p>`; details.appendChild(description); const cookiesList = this.createCookiesListForCategory(category.key); details.appendChild(cookiesList); categoryEl.appendChild(details); this.attachCategoryEventListeners(categoryEl,category); return categoryEl},createCookiesListForCategory:function(categoryKey) {const container = document.createElement('div'); container.className = 'ls-cookies-list'; const categoryCookies = this.getCookiesForCategory(categoryKey); if (categoryCookies.length > 0) {container.innerHTML = '<h4>Cookies in this category:</h4>'; const list = document.createElement('ul'); categoryCookies.forEach(cookie => {const item = document.createElement('li'); item.className = 'ls-cookie-item'; item.innerHTML = ` <div class="ls-cookie-header"> <strong>${cookie.cookie_name}</strong> <span class="ls-cookie-duration">${cookie.duration}</span> </div> <div class="ls-cookie-purpose">${cookie.purpose}</div> <div class="ls-cookie-description">${cookie.description}</div> `; list.appendChild(item)}); container.appendChild(list)}else {container.innerHTML = '<p>No specific cookies defined for this category.</p>'}return container},getCookiesForCategory:function(categoryKey) {if (!this.cookieData || !this.cookieData.rows) return []; return this.cookieData.rows .filter(row => row.values.category_key === categoryKey) .map(row => row.values)},attachCategoryEventListeners:function(categoryEl,category) {const learnMoreBtn = categoryEl.querySelector('.ls-learn-more-btn'); const details = categoryEl.querySelector('.ls-category-details'); learnMoreBtn.addEventListener('click',(e) => {e.preventDefault(); this.toggleCategoryDetails(categoryEl,category)}); const toggle = categoryEl.querySelector('.ls-toggle-input'); toggle.addEventListener('change',(e) => {this.handleCategoryToggle(category.key,e.target.checked)}); const isEnabled = this.currentConsent[category.key] !== false; toggle.checked = category.required || isEnabled},toggleCategoryDetails:function(categoryEl,category) {const learnMoreBtn = categoryEl.querySelector('.ls-learn-more-btn'); const details = categoryEl.querySelector('.ls-category-details'); const isExpanded = learnMoreBtn.getAttribute('aria-expanded') === 'true'; if (isExpanded) {details.style.transition = `all ${CONFIG.animations.duration}ms ${CONFIG.animations.easing}`; details.style.maxHeight = '0px'; details.style.opacity = '0'; details.style.paddingTop = '0px'; details.style.paddingBottom = '0px'; setTimeout(() => {details.style.display = 'none'},CONFIG.animations.duration); learnMoreBtn.textContent = 'Learn More'; learnMoreBtn.setAttribute('aria-expanded','false'); Utils.log('Collapsed category:',category.label)}else {details.style.display = 'block'; details.style.maxHeight = '0px'; details.style.opacity = '0'; details.style.paddingTop = '0px'; details.style.paddingBottom = '0px'; const naturalHeight = details.scrollHeight; setTimeout(() => {details.style.transition = `all ${CONFIG.animations.duration}ms ${CONFIG.animations.easing}`; details.style.maxHeight = naturalHeight + 'px'; details.style.opacity = '1'; details.style.paddingTop = '15px'; details.style.paddingBottom = '15px'},10); learnMoreBtn.textContent = 'Show Less'; learnMoreBtn.setAttribute('aria-expanded','true'); Utils.log('Expanded category:',category.label)}},handleCategoryToggle:function(categoryKey,enabled) {Utils.log('Category toggled:',categoryKey,enabled); this.currentConsent[categoryKey] = enabled; HubSpotAPI.updateConsent(categoryKey,enabled)},createActionButtons:function() {const container = document.createElement('div'); container.className = 'ls-action-buttons'; container.innerHTML = ` <button class="ls-save-btn" id="ls-save-preferences"> Save Preferences </button> <button class="ls-accept-all-btn" id="ls-accept-all"> Accept All </button> <button class="ls-reject-all-btn" id="ls-reject-all"> Reject All Optional </button> `; container.querySelector('#ls-save-preferences').addEventListener('click',() => {this.savePreferences()}); container.querySelector('#ls-accept-all').addEventListener('click',() => {this.acceptAll()}); container.querySelector('#ls-reject-all').addEventListener('click',() => {this.rejectAll()}); return container},savePreferences:function() {Utils.log('Saving preferences:',this.currentConsent); Object.keys(this.currentConsent).forEach(key => {HubSpotAPI.updateConsent(key,this.currentConsent[key])}); this.hideCategoryOptions(); this.showSuccessMessage('Your cookie preferences have been saved.')},acceptAll:function() {Utils.log('Accepting all cookies'); CONFIG.categories.forEach(category => {if (!category.required) {this.currentConsent[category.key] = true; const toggle = this.categoryContainer.querySelector(`[data-category="${category.key}"]`); if (toggle) toggle.checked = true}}); this.savePreferences()},rejectAll:function() {Utils.log('Rejecting all optional cookies'); CONFIG.categories.forEach(category => {if (!category.required) {this.currentConsent[category.key] = false; const toggle = this.categoryContainer.querySelector(`[data-category="${category.key}"]`); if (toggle) toggle.checked = false}}); this.savePreferences()},showSuccessMessage:function(message) {const toast = document.createElement('div'); toast.className = 'ls-success-toast'; toast.textContent = message; document.body.appendChild(toast); setTimeout(() => {toast.style.opacity = '0'; setTimeout(() => toast.remove(),300)},3000)},updateConsentUI:function(consentState) {if (!consentState || !this.categoryContainer) return; Object.keys(consentState).forEach(key => {const toggle = this.categoryContainer.querySelector(`[data-category="${key}"]`); if (toggle) {toggle.checked = !!consentState[key]}this.currentConsent[key] = !!consentState[key]})}}; if (document.readyState === 'loading') {document.addEventListener('DOMContentLoaded',() => {setTimeout(() => OptionAEnhancer.init(),100)})}else {setTimeout(() => OptionAEnhancer.init(),100)}window.LSRetailOptionA = {enhancer:OptionAEnhancer,hubspotAPI:HubSpotAPI,hubDB:HubDBIntegration,utils:Utils,config:CONFIG }; Utils.log('LS Retail Option A Cookie Enhancer loaded')})();