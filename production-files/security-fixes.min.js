const SecurityManager = {nonce:null,init:function() {const scripts = document.getElementsByTagName('script'); for (let script of scripts) {if (script.nonce) {this.nonce = script.nonce; break}}if (!this.nonce) {this.nonce = this.generateNonce()}console.log('[LS Retail Security]','Security Manager initialized with nonce:',this.nonce ? 'present' :'missing')},generateNonce:function() {const array = new Uint8Array(16); crypto.getRandomValues(array); return btoa(String.fromCharCode.apply(null,array)).replace(/[+/=]/g,'')},sanitizeHTML:function(html) {if (!html) return ''; const parser = new DOMParser(); const doc = parser.parseFromString(html,'text/html'); const allowedTags = ['p','strong','em','ul','li','br']; const allowedAttributes = ['class']; this.cleanNode(doc.body,allowedTags,allowedAttributes); return doc.body.innerHTML},cleanNode:function(node,allowedTags,allowedAttributes) {const walker = document.createTreeWalker( node,NodeFilter.SHOW_ELEMENT,null,false ); const nodesToRemove = []; let currentNode = walker.nextNode(); while (currentNode) {const tagName = currentNode.tagName.toLowerCase(); if (!allowedTags.includes(tagName)) {nodesToRemove.push(currentNode)}else {const attributes = Array.from(currentNode.attributes); attributes.forEach(attr => {if (!allowedAttributes.includes(attr.name.toLowerCase())) {currentNode.removeAttribute(attr.name)}})}currentNode = walker.nextNode()}nodesToRemove.forEach(node => {const parent = node.parentNode; while (node.firstChild) {parent.insertBefore(node.firstChild,node)}parent.removeChild(node)})},sanitizeText:function(text) {if (!text) return ''; const temp = document.createElement('div'); temp.innerHTML = text; return temp.textContent || temp.innerText || ''},createSecureElement:function(tagName,textContent,className) {const element = document.createElement(tagName); if (textContent) {element.textContent = this.sanitizeText(textContent)}if (className) {element.className = this.sanitizeText(className)}if ((tagName === 'script' || tagName === 'style') && this.nonce) {element.nonce = this.nonce}return element},createSecureTemplate:function(templateData) {const container = document.createElement('div'); Object.keys(templateData).forEach(key => {const value = templateData[key]; const element = document.createElement('div'); element.className = key; element.textContent = this.sanitizeText(value); container.appendChild(element)}); return container},generateSecureId:function(prefix = 'ls') {const randomBytes = new Uint8Array(8); crypto.getRandomValues(randomBytes); const randomId = Array.from(randomBytes,byte => byte.toString(16).padStart(2,'0') ).join(''); return `${prefix}-${randomId}`},validateURL:function(url) {if (!url) return ''; try {const urlObj = new URL(url,window.location.origin); const allowedProtocols = ['http:','https:','mailto:']; if (allowedProtocols.includes(urlObj.protocol)) {return urlObj.href}}catch (e) {console.error('[LS Retail Security]','Invalid URL:',url)}return ''}}; const SecureImplementation = {createSecureCategoryElement:function(category) {const categoryEl = document.createElement('div'); categoryEl.className = 'ls-category'; categoryEl.setAttribute('data-category',SecurityManager.sanitizeText(category.key)); const header = document.createElement('div'); header.className = 'ls-category-header'; const categoryInfo = document.createElement('div'); categoryInfo.className = 'ls-category-info'; const iconSpan = SecurityManager.createSecureElement('span',category.icon,'ls-category-icon'); const labelSpan = SecurityManager.createSecureElement('span',category.label,'ls-category-label'); categoryInfo.appendChild(iconSpan); categoryInfo.appendChild(labelSpan); const controls = document.createElement('div'); controls.className = 'ls-category-controls'; const learnMoreBtn = SecurityManager.createSecureElement('button','Learn More','ls-learn-more-btn'); learnMoreBtn.setAttribute('data-category',SecurityManager.sanitizeText(category.key)); learnMoreBtn.setAttribute('aria-expanded','false'); learnMoreBtn.setAttribute('type','button'); const toggleLabel = document.createElement('label'); toggleLabel.className = 'ls-toggle'; toggleLabel.setAttribute('aria-label',`Enable ${SecurityManager.sanitizeText(category.label)}`); const toggleInput = document.createElement('input'); toggleInput.type = 'checkbox'; toggleInput.className = 'ls-toggle-input'; toggleInput.setAttribute('data-category',SecurityManager.sanitizeText(category.key)); if (category.required) {toggleInput.checked = true; toggleInput.disabled = true}const toggleSlider = document.createElement('span'); toggleSlider.className = 'ls-toggle-slider'; toggleLabel.appendChild(toggleInput); toggleLabel.appendChild(toggleSlider); controls.appendChild(learnMoreBtn); controls.appendChild(toggleLabel); header.appendChild(categoryInfo); header.appendChild(controls); categoryEl.appendChild(header); const details = document.createElement('div'); details.className = 'ls-category-details'; details.style.display = 'none'; details.setAttribute('role','region'); details.setAttribute('aria-labelledby',`category-${SecurityManager.sanitizeText(category.id)}-header`); const description = document.createElement('div'); description.className = 'ls-category-description'; const descriptionPara = document.createElement('p'); descriptionPara.textContent = SecurityManager.sanitizeText(category.description); description.appendChild(descriptionPara); details.appendChild(description); categoryEl.appendChild(details); return categoryEl},createSecureCookiesList:function(cookieData) {const container = document.createElement('div'); container.className = 'ls-cookies-list'; if (!cookieData || cookieData.length === 0) {const noCookiesMsg = document.createElement('p'); noCookiesMsg.textContent = 'No specific cookies defined for this category.'; container.appendChild(noCookiesMsg); return container}const header = SecurityManager.createSecureElement('h4','Cookies in this category:',''); container.appendChild(header); const list = document.createElement('ul'); cookieData.forEach(cookie => {const item = document.createElement('li'); item.className = 'ls-cookie-item'; const cookieHeader = document.createElement('div'); cookieHeader.className = 'ls-cookie-header'; const cookieName = SecurityManager.createSecureElement('strong',cookie.cookie_name,''); const duration = SecurityManager.createSecureElement('span',cookie.duration,'ls-cookie-duration'); cookieHeader.appendChild(cookieName); cookieHeader.appendChild(duration); const purpose = SecurityManager.createSecureElement('div',cookie.purpose,'ls-cookie-purpose'); const description = document.createElement('div'); description.className = 'ls-cookie-description'; description.innerHTML = SecurityManager.sanitizeHTML(cookie.description); item.appendChild(cookieHeader); item.appendChild(purpose); item.appendChild(description); list.appendChild(item)}); container.appendChild(list); return container}}; const SecureStyleManager = {setCSSProperty:function(element,property,value) {if (!this.isValidCSSProperty(property)) {console.error('[LS Retail Security]','Invalid CSS property:',property); return}const sanitizedValue = this.sanitizeCSSValue(value); element.style.setProperty(property,sanitizedValue)},isValidCSSProperty:function(property) {const allowedProperties = [ 'opacity','max-height','transition','transform','padding-top','padding-bottom','--natural-height' ]; return allowedProperties.includes(property)},sanitizeCSSValue:function(value) {const sanitized = String(value) .replace(/[<>'"]/g,'') .replace(/url\(/gi,'') .replace(/expression\(/gi,'') .replace(/javascript:/gi,''); return sanitized},setSecureTransition:function(element,property,duration,easing) {const validProperty = this.sanitizeCSSValue(property); const validDuration = this.sanitizeCSSValue(duration + 'ms'); const validEasing = this.sanitizeCSSValue(easing); this.setCSSProperty(element,'transition',`${validProperty}${validDuration}${validEasing}`)}}; document.addEventListener('DOMContentLoaded',function() {SecurityManager.init()}); window.LSRetailSecurity = {SecurityManager,SecureImplementation,SecureStyleManager };